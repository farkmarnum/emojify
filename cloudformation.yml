AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DomainCertificateArn:
    Description: Arn of ACM cert
    Type: String
  ImagesTag:
    Type: String
  FrontendDomain:
    Type: String
  BackendDomain:
    Type: String
  HostedZoneId:
    Type: String

  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: Choose which VPC the Application Load Balancer should be deployed to
    Default: vpc-72b6bd1a
  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: subnet-9e5361f6,subnet-886109f2
  EnvironmentName:
    Type: String
    MaxLength: 16
    AllowedPattern: ^[a-z0-9-]*$
  BackendTaskMemory:
    Type: Number
    Default: 1024
  BackendTaskCPU:
    Type: Number
    Default: 256
  DesiredNumberOfBackendInstances:
    Type: Number
    Default: 1
  BackendContainerPort:
    Type: Number
    Default: 3000

Resources:
  # SHARED:
  CloudWatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 365

  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${EnvironmentName}-cluster'
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${EnvironmentName}-ExecutionRole' 
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # FRONTEND:
  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'frontend origin access identity'

  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrontendDomain
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - "*"
          AllowedMethods:
          - GET
          AllowedOrigins:
          - "*"
          Id: OpenCors

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginIdentity.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "${FrontendS3Bucket.Arn}/*"

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt FrontendS3Bucket.DomainName
          Id: S3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
        Aliases:
          - !Ref FrontendDomain
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          SmoothStreaming: false
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html
        HttpVersion: http2
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
    DependsOn:
      - FrontendS3Bucket

  FrontendDNSRecord:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub '${FrontendDomain}.'
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
            DNSName: !GetAtt CloudFront.DomainName

  # BACKEND:
  BackendLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 80 and 443 from all
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
  BackendSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer to container port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref BackendContainerPort
          ToPort: !Ref BackendContainerPort
          SourceSecurityGroupId: !GetAtt BackendLoadBalancerSecurityGroup.GroupId
    
  BackendTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      TargetType: ip
      Name: !Sub '${EnvironmentName}-be-tg'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  BackendMainListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Certificates:
        - CertificateArn: !Ref DomainCertificateArn
    
  BackendRedirectListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
    
  BackendLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${EnvironmentName}-be-lb'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-be-lb'
      Subnets: !Ref Subnets
      SecurityGroups:
        - !GetAtt BackendLoadBalancerSecurityGroup.GroupId

  BackendService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredNumberOfBackendInstances
      LaunchType: FARGATE
      TaskDefinition: !Ref BackendTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !GetAtt BackendSecurityGroup.GroupId
      LoadBalancers:
        - ContainerName: !Ref EnvironmentName
          ContainerPort: !Ref BackendContainerPort
          TargetGroupArn: !Ref BackendTargetGroup
    DependsOn:
      - BackendMainListener
    
  BackendTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref EnvironmentName
      Memory: !Ref BackendTaskMemory
      Cpu: !Ref BackendTaskCPU
      ContainerDefinitions:
        - Name: !Ref EnvironmentName
          Essential: true
          Image: !Sub '${AWS::AccountId}.dkr.ecr.us-east-2.amazonaws.com/emojify-backend:${ImagesTag}'
          Environment:
            - Name: PORT
              Value: !Ref BackendContainerPort
          PortMappings:
            - ContainerPort: !Ref BackendContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref EnvironmentName
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole

  BackendDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: !Sub 'Backend DNS to ECS for ${EnvironmentName}'
      RecordSets:
      - Name: !Sub '${BackendDomain}.'
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'BackendLoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'BackendLoadBalancer.DNSName'

  S3BucketForWWWRedirect:
    Type: "AWS::S3::Bucket"
    Properties: 
      BucketName: !Sub 'www.${FrontendDomain}'
      AccessControl: PublicRead
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref FrontendDomain
          Protocol: https

  WWWRedirectDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: !Sub 'Frontend DNS to ECS for ${EnvironmentName}'
      RecordSets:
      - Name: !Sub 'www.${FrontendDomain}.'
        Type: A
        AliasTarget:
          HostedZoneId: Z2O1EMRO9K5GLX # https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
          DNSName: s3-website.us-east-2.amazonaws.com # https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
