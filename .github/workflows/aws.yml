name: Deploy to ECS

on:
  push:
    branches:
      - main
    paths:
    - 'frontend/**'
    - 'frontend/*'
    - 'backend/**'
    - 'backend/*'
    - '.github/workflows/aws.yml'
    - 'cloudformation.yml'
  workflow_dispatch:

env:
  stack-name: emojify-prod
  environment-name: emojify-prod
  certificate-arn: arn:aws:acm:us-east-2:${{ secrets.AWS_ACCOUNT_ID }}:certificate/2358ece1-9b02-43b4-936a-0f89442c3e62
  frontend-domain: emojify.net
  backend-domain: api.emojify.net
  frontend-port: 3000
  backend-port: 3000
  hosted-zone-id: Z01187342BJLM81O38FA3

  cloudformation-role-arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/cloudformation-full
  AWS_REGION: us-east-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  image_tag: ${{ github.sha }}
  google-analytics-tracking-id: ${{ secrets.GA_TRACKING_ID }}

jobs:
  build-and-upload-backend:
    name: build and upload backend
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout this repo
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create env file
      run: |
        cd backend
        touch .env
        echo PORT=${{ env.backend-port }} >> .env

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: emojify-backend
        IMAGE_TAG: ${{ env.image_tag }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  build-and-upload-frontend:
    name: build and upload frontend
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout this repo
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create env file
      run: |
        cd backend
        touch .env
        echo REACT_APP_API_URL=https://${{ env.backend-domain }} >> .env
        echo REACT_APP_GOOGLE_ANALYTICS_TRACKING_ID=${{ env.google-analytics-tracking-id }} >> .env
        echo PORT=${{ env.frontend-port }} >> .env

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: emojify-frontend
        IMAGE_TAG: ${{ env.image_tag }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  cloudformation:
    name: cloudformation
    runs-on: ubuntu-18.04
    needs:
      - build-and-upload-backend
      - build-and-upload-frontend

    steps:
    - name: Checkout this repo
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Deploy with CloudFormation
      id: deploy-cloudformation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{ env.stack-name }}
        template: cloudformation.yml
        capabilities: CAPABILITY_NAMED_IAM
        role-arn: ${{ env.cloudformation-role-arn }}
        parameter-overrides: >-
          DomainCertificateArn=${{ env.certificate-arn }},
          ImagesTag=${{ env.image_tag }},
          FrontendDomain=${{ env.frontend-domain }},
          BackendDomain=${{ env.backend-domain }},
          HostedZoneId=${{ env.hosted-zone-id }},
          EnvironmentName=${{ env.environment-name }},
          FrontendContainerPort=${{ env.frontend-port }},
          BackendContainerPort=${{ env.backend-port }},
          GoogleAnalyticsTrackingId=${{ env.google-analytics-tracking-id }}
